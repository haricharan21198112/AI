import heapq

goal = [(1,2,3),(4,5,6),(7,8,0)]

def heuristic(state):
    return sum(abs((val-1)//3 - i) + abs((val-1)%3 - j)
               for i, row in enumerate(state)
               for j, val in enumerate(row) if val)

def moves(state):
    x, y = next((i,j) for i in range(3) for j in range(3) if state[i][j] == 0)
    dirs = [(-1,0),(1,0),(0,-1),(0,1)]
    for dx, dy in dirs:
        nx, ny = x+dx, y+dy
        if 0<=nx<3 and 0<=ny<3:
            new = [list(row) for row in state]
            new[x][y], new[nx][ny] = new[nx][ny], new[x][y]
            yield tuple(tuple(row) for row in new)

def solve(start):
    heap = [(heuristic(start), 0, start, [])]
    visited = set()
    while heap:
        est, cost, state, path = heapq.heappop(heap)
        if state in visited: continue
        visited.add(state)
        if state == tuple(tuple(r) for r in goal):
            return path + [state]
        for next_state in moves(state):
            heapq.heappush(heap, (cost+1+heuristic(next_state), cost+1, next_state, path + [state]))

start = ((1,2,3),(4,0,6),(7,5,8))
solution = solve(start)

for step in solution:
    for row in step: print(row)
    print("---")
